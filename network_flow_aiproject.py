# -*- coding: utf-8 -*-
"""Network flow_AIProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wRIwFvRGkEu27jWw9DxMO1ISRvVbHoUQ
"""

import pandas as pd
import random
import numpy as np
import networkx as nx

def initialize(N):
  #initialize with 0 matrix N*N
  crom = np.zeros((N,N))

  for i in range(0, N):    
    for j in range(0, i-1):
        crom[i][j] = random.randint(1, 20)
        crom[j][i] = crom[i][j]

  return crom

A = initialize(N = 10)
#drow our chromosomes with NX
G = nx.from_numpy_matrix(np.array(A))  
nx.draw(G, with_labels=True)

def create_starting_population(chrom_len, array_len):
    population = []
    for i in range(0,chrom_len):
        population.append(initialize(array_len))
        
    return population

A = create_starting_population(chrom_len = 10, array_len = 5)
A[0]

def fitness(chrom):
  score = np.count_nonzero(chrom)
  return score

def crossover(parent1, parent2):
  new_child_from_parents = np.zeros((len(parent1),len(parent1)))
  #print(new_child_from_parents)
  one_point_crossover = random.randint(1, len(parent1) - 2)

  newChild1 = parent1[0:one_point_crossover]
  newChild2 = parent2[one_point_crossover:]
  
  new_child_from_parents = np.append(newChild1, newChild2)
  crossOvered_chrom = np.reshape(new_child_from_parents, (len(parent1),len(parent1)))

  return crossOvered_chrom

crossover(A[0], A[1])

def mutation(chrom):
  new_chrom = chrom
  random_value = random.randint(1, len(chrom) - 2)
  index1 = random.randint(1, len(chrom) - 2)
  index2 = random.randint(1, len(chrom) - 2)
  new_chrom[index1, index2] = random_value

  return new_chrom

print(A[0])
mutation(chrom = A[0])

def calculate_score(pop):

  #final_answer = np.zeros((array_lens,array_lens))
  chrome_score = []
  for i in range (0,len(pop)):
    chrome_score.append(fitness(pop[i]))
      
  return chrome_score

res = False
def Main(chroms_score, population):
  allPopulation = population
  new_population = []
  if len(chroms_score) < 0 :
      res = True
  res = all(ele == chroms_score[0] for ele in chroms_score)
      
  if(res):
      # all chromes have Equal score
      for i in range (0,len(chroms_score)):
        new_population.append(mutation(chrom = allPopulation[i]))

      return new_population
  else:
      print("Not equal")
      for i in range (0,len(chroms_score)):
        new_population.append(crossover(chrom = allPopulation[i]))
        
      return new_population

oldpop = create_starting_population(chrom_len = 10, array_len = 10)
newpop = Main(chroms_score = calculate_score(pop = oldpop), population = oldpop) 
#print('score of old population is' ,calculate_score(pop = oldpop))
#print('score of new population is' ,calculate_score(pop = newpop))


#Find the index of the max  score
score_list = calculate_score(pop = newpop)
max_value = min(score_list)
max_index = score_list.index(max_value)

optimal = newpop[max_index]
print('My optimal score is: ' ,min(calculate_score(pop = newpop)))
print('My optimal Chromosome is: ')
print(optimal)
print("My optimal Chromosome's Graf is: " )
G = nx.from_numpy_matrix(np.array(optimal))  
nx.draw(G, with_labels=True)